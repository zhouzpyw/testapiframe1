{"uid":"f94449d9821ff6b9","name":"appid错误，获取token失败","fullName":"Case.test_baseapi.TestBaseApi#test_base_api","historyId":"d79120c8627002d04a849f2aa18700ab","time":{"start":1691248419010,"stop":1691248419138,"duration":128},"description":"微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret","descriptionHtml":"<p>微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <Case.test_baseapi.TestBaseApi object at 0x0000019773CD64A0>\nloggers = <Logger main.testapis (DEBUG)>, number = 2\ntitle = 'appid错误，获取token失败', exceptresult = 'access_token'\ndata = {'appid': 'wxc2007f0b1387d1ea2', 'grant_type': 'client_credential', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}\n\n    @allure.feature(modulename)\n    @allure.story(yamlstory)\n    @allure.title('{title}')\n    @allure.description(yamldescription)\n    @pytest.mark.parametrize(yaml_case_info(yamlfilename),yaml_case_data(yamlfilename))\n    def test_base_api(self,loggers,number,title,exceptresult,data):\n        # 调用函数\n        basefuc = driveallfuc('Case.wxgzh','WxGzh',method=self.apimethod, url=self.apiurl, data=data)\n        loggers.info('开始测试接口{0}......'.format(self.basefucname))\n        loggers.info('开始执行第{0}条用例，用例标题为：{1}'.format(number,title))\n        # 调用方法结果赋值给response\n        response = basefuc\n        try:\n            #根据yaml文件中相关配置，调用断言方法断言\n>           self.assert_choice(self.getvalidate['asserttype'],exceptresult,str(response.json().keys()))\n\nCase\\test_baseapi.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nComm\\base_assert.py:15: in assert_choice\n    return self.inner_assert(exceptstr, resultstr)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Case.test_baseapi.TestBaseApi object at 0x0000019773CD64A0>\nexceptstr = 'access_token', resultstr = \"dict_keys(['errcode', 'errmsg'])\"\n\n    def inner_assert(self, exceptstr, resultstr):\n        '''定义断言方法（包含断言）'''\n>       assert exceptstr in resultstr\nE       AssertionError\n\nComm\\base_assert.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"loggers","time":{"start":1691248418629,"stop":1691248418629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <Case.test_baseapi.TestBaseApi object at 0x0000019773CD64A0>\nloggers = <Logger main.testapis (DEBUG)>, number = 2\ntitle = 'appid错误，获取token失败', exceptresult = 'access_token'\ndata = {'appid': 'wxc2007f0b1387d1ea2', 'grant_type': 'client_credential', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}\n\n    @allure.feature(modulename)\n    @allure.story(yamlstory)\n    @allure.title('{title}')\n    @allure.description(yamldescription)\n    @pytest.mark.parametrize(yaml_case_info(yamlfilename),yaml_case_data(yamlfilename))\n    def test_base_api(self,loggers,number,title,exceptresult,data):\n        # 调用函数\n        basefuc = driveallfuc('Case.wxgzh','WxGzh',method=self.apimethod, url=self.apiurl, data=data)\n        loggers.info('开始测试接口{0}......'.format(self.basefucname))\n        loggers.info('开始执行第{0}条用例，用例标题为：{1}'.format(number,title))\n        # 调用方法结果赋值给response\n        response = basefuc\n        try:\n            #根据yaml文件中相关配置，调用断言方法断言\n>           self.assert_choice(self.getvalidate['asserttype'],exceptresult,str(response.json().keys()))\n\nCase\\test_baseapi.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nComm\\base_assert.py:15: in assert_choice\n    return self.inner_assert(exceptstr, resultstr)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Case.test_baseapi.TestBaseApi object at 0x0000019773CD64A0>\nexceptstr = 'access_token', resultstr = \"dict_keys(['errcode', 'errmsg'])\"\n\n    def inner_assert(self, exceptstr, resultstr):\n        '''定义断言方法（包含断言）'''\n>       assert exceptstr in resultstr\nE       AssertionError\n\nComm\\base_assert.py:11: AssertionError","steps":[],"attachments":[{"uid":"9ccfe4c3d555d73b","name":"log","source":"9ccfe4c3d555d73b.txt","type":"text/plain","size":665}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"loggers::0","time":{"start":1691248419204,"stop":1691248419204,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"story","value":"获取access_token"},{"name":"feature","value":"微信公众号"},{"name":"tag","value":"@pytest.mark.usefixtures('loggers')"},{"name":"parentSuite","value":"Case"},{"name":"suite","value":"test_baseapi"},{"name":"subSuite","value":"TestBaseApi"},{"name":"host","value":"DESKTOP-00LA7HN"},{"name":"thread","value":"71016-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Case.test_baseapi"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"{'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea2', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}"},{"name":"exceptresult","value":"'access_token'"},{"name":"number","value":"2"},{"name":"title","value":"'appid错误，获取token失败'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('loggers')"]},"source":"f94449d9821ff6b9.json","parameterValues":["{'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea2', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}","'access_token'","2","'appid错误，获取token失败'"]}