INFO - 2023-08-09 04:43:28,798 - apiutils.py:110 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
INFO - 2023-08-09 04:43:35,234 - apiutils.py:110 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
INFO - 2023-08-09 04:43:46,626 - apiutils.py:110 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
ERROR - 2023-08-09 04:48:34,151 - apiutils.py:114 -[apiutils:extract_data] - json提取到的数据为空
DEBUG - 2023-08-09 04:50:04,178 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，该接口返回结果可能为空'}
ERROR - 2023-08-09 04:50:04,178 - apiutils.py:116 -[apiutils:extract_data] - json未提取到数据，该接口返回结果可能为空,或yaml文件extract的json表达式错误
INFO - 2023-08-09 04:54:25,124 - apiutils.py:111 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 04:54:25,124 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:03:11,902 - apiutils.py:112 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 05:03:11,902 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
DEBUG - 2023-08-09 05:03:11,903 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'json未提取到数据，该接口返回结果可能为空,或yaml文件extract的json表达式错误'}
ERROR - 2023-08-09 05:03:11,903 - apiutils.py:117 -[apiutils:extract_data] - json未提取到数据，该接口返回结果可能为空,或yaml文件extract的json表达式错误
INFO - 2023-08-09 05:04:32,336 - apiutils.py:112 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 05:04:32,336 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:04:32,336 - apiutils.py:112 -[apiutils:extract_data] - json提取到的数据为{'time': 2018433021}
DEBUG - 2023-08-09 05:04:32,337 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
INFO - 2023-08-09 05:34:03,751 - apiutils.py:103 -[apiutils:extract_data] - 正则提取到的数据为：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:34:22,680 - apiutils.py:103 -[apiutils:extract_data] - 正则提取到的数据为：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:35:42,084 - apiutils.py:103 -[apiutils:extract_data] - 正则提取到的数据为：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:35:42,084 - apiutils.py:100 -[apiutils:extract_data] - 正则提取到的数据为：{'time': 2018433021}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
INFO - 2023-08-09 05:37:10,681 - apiutils.py:103 -[apiutils:extract_data] - 正则提取到的数据为：{'token': 'xiaoluo'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
INFO - 2023-08-09 05:37:10,681 - apiutils.py:100 -[apiutils:extract_data] - 正则提取到的数据为：{'time': 2018433021}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
ERROR - 2023-08-09 05:37:10,681 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:37:10,681 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': '未提取到数据，该接口返回结果可能为空或正则提取方式不支持！'}
INFO - 2023-08-09 05:51:10,457 - apiutils.py:100 -[apiutils:extract_data] - 正则提取到的数据为：{'token': 'xiaoluo'}
DEBUG - 2023-08-09 05:51:10,457 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 05:51:10,457 - apiutils.py:97 -[apiutils:extract_data] - 正则提取到的数据为：{'time': 2018433021}
DEBUG - 2023-08-09 05:51:10,457 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
ERROR - 2023-08-09 05:54:51,433 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:54:51,433 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，正则提取方式不支持或错误！'}
INFO - 2023-08-09 05:54:51,433 - apiutils.py:98 -[apiutils:extract_data] - 正则提取到的数据为：{'time': 2018433021}
DEBUG - 2023-08-09 05:54:51,433 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
ERROR - 2023-08-09 05:55:09,709 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:55:09,709 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，正则提取方式不支持或错误！'}
INFO - 2023-08-09 05:55:09,709 - apiutils.py:98 -[apiutils:extract_data] - 正则提取到的数据为：{'time': 2018433021}
DEBUG - 2023-08-09 05:55:09,709 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
ERROR - 2023-08-09 05:56:27,362 - apiutils.py:106 -[apiutils:extract_data] - 未提取到数据，该接口返回结果可能为空或正则提取方式不支持！
DEBUG - 2023-08-09 05:56:27,362 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': '未提取到数据，正则提取方式不支持或错误！'}
INFO - 2023-08-09 06:00:32,321 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 06:00:32,321 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 06:00:32,321 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'time': 2018433021}
DEBUG - 2023-08-09 06:00:32,321 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
INFO - 2023-08-09 06:01:25,108 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 06:01:25,108 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 06:01:25,108 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'time': 2018433021}
DEBUG - 2023-08-09 06:01:25,108 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
INFO - 2023-08-09 06:01:39,064 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'token': 'xiaoluo'}
DEBUG - 2023-08-09 06:01:39,064 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'token': 'xiaoluo'}
INFO - 2023-08-09 06:01:39,064 - apiutils.py:98 -[apiutils:extract_data] - json提取到的数据为{'time': 2018433021}
DEBUG - 2023-08-09 06:01:39,079 - yaml_utils.py:46 -[yaml_utils:yaml_write_extractyaml] - 写入extract.yaml文件成功，写入的数据：{'time': 2018433021}
DEBUG - 2023-08-09 06:14:23,793 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:14:33,639 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:15:19,173 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:15:42,013 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:15:55,679 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:16:25,417 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:18:50,513 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:19:00,624 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': {'error_code': 200}}, {'eq': {'msg': '登录成功'}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:32:53,113 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': ['"access_token":', '"expires_in":7200']}, {'eq': {'msg': '登录成功', 'error_code': 200}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:44:04,232 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': ['"access_token":', '"expires_in":7200']}, {'eq': {'msg': '登录成功', 'error_code': 200}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:44:04,232 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': ['"access_token":', '"expires_in":7200']}, {'eq': {'msg': '登录成功', 'error_code': 200}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
ERROR - 2023-08-09 06:44:04,232 - base_assert.py:45 -[base_assert:contains_assert] - contains断言失败：预期结果应该包含的字符串有【['"access_token":', '"expires_in":7200']】实际结果【assssssssssssssssssss】
DEBUG - 2023-08-09 06:45:18,122 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': ['"access_token":', '"expires_in":7200']}, {'eq': {'msg': '登录成功', 'error_code': 200}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
DEBUG - 2023-08-09 06:45:18,122 - yaml_utils.py:28 -[yaml_utils:yaml_read] - 读取yaml文件成功，获取到的数据：[{'feature': '微信公众号', 'story': '获取access_token', 'description': '微信公众号获取access_token接口，参数格式要求为form表单。appid表示第三方用户唯一凭证，secret表示第三方用户唯一凭证密钥，即appsecret', 'date': '${testa(a,e,r)}', 'baseinfo': {'apiname': 'get_access_token', 'header': {'Content-Type': '${testa(a,e,r)}'}, 'requst': {'method': 'GET', 'url': '/cgi-bin/token'}}, 'testcase': [{'case_name': 'appid,secret正确,获取token成功', 'data': {'date1': '${testa(a,c,d)}', 'date2': '${testa(a,u,d)}', 'grant_type': 'client_credential', 'appid': 'wxc2007f0b1387d1ea', 'secret': 'e3a83fc0db6d79fb5900559bcdd324a4'}, 'validation': [{'contains': ['"access_token":', '"expires_in":7200']}, {'eq': {'msg': '登录成功', 'error_code': 200}}], 'extract': [{'token': '$.info.token', 'time': '$.info.time'}]}]}]
INFO - 2023-08-09 06:45:18,122 - base_assert.py:40 -[base_assert:contains_assert] - contains断言成功：预期结果应该包含的字符串有【['"access_token":', '"expires_in":7200']】实际结果【asssss{"access_token":"ACCESS_TOKEN","expires_in":7200}sssssssssssssss】
